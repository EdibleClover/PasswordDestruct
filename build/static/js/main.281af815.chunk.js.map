{"version":3,"sources":["components/Bomb.jpg","components/MyCard.js","components/PostController.js","components/PassGen.js","components/MyRouter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MyCard","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","Card","inverse","CardImg","width","src","bomb","alt","CardImgOverlay","CardTitle","CardText","components_MyRouter","Component","rp","require","PostController","_this","Post","_ref","asyncToGenerator","regenerator_default","mark","_callee","body","options","data","wrap","_context","prev","next","method","uri","sent","abrupt","t0","stop","_x","apply","arguments","state","returnData","jsonBody","JSON","stringify","setState","pw","React","PassGen","generate","charSet","i","kindaRandom","myBuffer","pwHash","letters","Math","floor","random","length","console","log","hashIt","hexString","window","history","replaceState","sending","buttonDisabled","_this2","Button","onClick","e","disabled","PostController_PostController","digestMessage","_ref2","_callee2","message","encoder","_context2","TextEncoder","encode","crypto","subtle","digest","_ref3","_callee3","_context3","_x2","buffer","byteArray","Uint8Array","toConsumableArray","map","value","toString","padStart","join","MyRouter","QueryString","location","search","substring","PassGen_PassGen","App","components_MyCard","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.281af815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bomb.49fe2db2.jpg\";","import React, { Component } from 'react';\r\nimport { Card, CardImg, CardText, \r\n    CardTitle, CardImgOverlay  } from 'reactstrap';\r\nimport { MyRouter } from './index.js'\r\nimport bomb from './Bomb.jpg'\r\n\r\n/**\r\n * Decided to use a card cuz its pretty\r\n */\r\nclass MyCard extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n            <Card inverse>\r\n                <CardImg width=\"100%\" src={bomb} alt=\"Card image cap\" />\r\n                <CardImgOverlay>\r\n                <CardTitle>PassWord Destruct</CardTitle>\r\n                <CardText>\r\n                    <small className=\"text-muted\"></small>\r\n                </CardText>\r\n                </CardImgOverlay>\r\n            </Card>\r\n            <Card >\r\n                    <MyRouter/>\r\n                <CardText>\r\n                    <small className=\"text-muted\"></small>\r\n                </CardText>\r\n            </Card>\r\n          </div>\r\n        );\r\n      }\r\n\r\n\r\n}\r\nexport default MyCard\r\n\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nconst rp = require('request-promise');\r\n/**\r\n * Conponent to control posting,\r\n * \r\n * \r\n */\r\nexport default class PostController extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {returnData:''}\r\n    }\r\n    async componentDidMount() {\r\n        let jsonBody = JSON.stringify(this.props.data)\r\n        const returnData = await this.Post(jsonBody); // Using await to get the result of async func\r\n        this.setState({ returnData });\r\n     }\r\n    Post = async (body) => {\r\n        try{\r\n            const options = {\r\n                method: 'POST',\r\n                uri: 'http://10.1.100.17/pwDestruct/php/api.php',  /**Need to make this file again */\r\n                body: body\r\n            }\r\n            const data = await rp(options);\r\n            return data; //This may or may not contain a password hash\r\n        }catch(e){return e}\r\n    }\r\n    render(props) {\r\n        /**Turn the body into JSON, doesn't like objects */\r\n        return(\r\n            <div>\r\n                    {(!this.props.data.pw) ? 'Retrieved Password: ' + this.state.returnData : 'Generated PassWord!:' + this.state.returnData }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {Button} from 'reactstrap';\r\nimport {PostController} from './index.js'\r\nexport default class PassGen extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            'pw': '',\r\n            'pwHash': '',\r\n            'sending' : false,\r\n            'buttonDisabled': false\r\n        }\r\n    }\r\n    /**ToDo,\r\n     * Add more seeds, make more random or something, but for now this will do\r\n     */\r\n     generate = async ()  =>{\r\n        const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n        const digits = '1234567890';\r\n        const punct  = '!@#%'; //Should probably add all of them\r\n        const charSet = letters + digits + punct;\r\n        let pw = '';\r\n        for(let i=0; i <= 16; i++){   //Hard coded pw length\r\n            let kindaRandom = Math.floor((Math.random() * charSet.length) + 1);\r\n            console.log(kindaRandom)\r\n            console.log(pw)\r\n            pw += charSet[kindaRandom]\r\n        }\r\n        let myBuffer = await hashIt(pw);\r\n        let pwHash = hexString(myBuffer);\r\n\r\n        console.log(pwHash)\r\n        window.history.replaceState( {} , \"Ticking\", \"?\"+pwHash );\r\n        this.setState((state, props) => {\r\n            return {\"pw\":pw, \"pwHash\":pwHash,'sending':true, buttonDisabled:true};\r\n          });\r\n        }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n            <Button\r\n                onClick={(e)=>this.generate()}\r\n                disabled={this.state.buttonDisabled}\r\n            >\r\n                Generate\r\n            </Button>\r\n            <br></br>\r\n                password: {this.state.pw}\r\n            <br></br>\r\n                HASH: {this.state.pwHash}\r\n\r\n                {\r\n                (this.state.sending) ?  \r\n                    <PostController\r\n                    data = {{'pw':this.state.pw,'pwHash':this.state.pwHash}}\r\n                    /> \r\n                : \r\n                ''\r\n                \r\n                }\r\n           \r\n\r\n       \r\n            </div>\r\n        )\r\n    }\r\n}\r\n// This is a promise\r\nconst digestMessage = async (message) => {\r\n    const encoder = new TextEncoder();\r\n    const data = await encoder.encode(message);\r\n    return crypto.subtle.digest('SHA-256', data);\r\n  }\r\nconst hashIt = async (pw) => {\r\n    let message = await digestMessage(pw)\r\n    return message;\r\n}\r\nconst  hexString = (buffer) => {\r\n    const byteArray = new Uint8Array(buffer);\r\n    const hexCodes = [...byteArray].map(value => {\r\n      const hexCode = value.toString(16);\r\n      const paddedHexCode = hexCode.padStart(2, '0');\r\n      return paddedHexCode;\r\n    });\r\n    return hexCodes.join('');\r\n  }","/**\r\n * \r\n * Simple router to control page content according to query on url\r\n */\r\nimport React, { Component } from 'react';\r\nimport {PassGen, PostController} from './index.js';\r\n\r\nclass MyRouter extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            'QueryString' : window.location.search.substring(1) //Get rid of leading ? in query\r\n        }\r\n    }\r\n    /**\r\n     * Render the components based on Query\r\n     */\r\n    render(){ \r\n        if(this.state.QueryString.length >= 32){\r\n            console.log(this.state.QueryString)\r\n            return(\r\n                <PostController\r\n                data={{'pwHash':this.state.QueryString}}\r\n                />\r\n            )\r\n        }else{\r\n            return(\r\n                <div>\r\n                <PassGen/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default MyRouter\r\n ","import React, { Component } from 'react';\nimport {MyCard} from './components'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MyCard/>\n      </div>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}